<?xml version="1.0"?>

<project basedir="." default="test" name="portal-test-tck" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:if="ant:if">
	<import file="build-test.xml" />

	<fail message="Please set the property ${tck.home}." unless="tck.home" />

	<target name="prepare-tck">

		<!-- Prepare TCK target is expected by CI. -->
		<echo>prepare-tck</echo>
	</target>

	<target name="prepare-tck-appserver">

		<propertycopy
			from="app.server.${app.server.type}.classes.portal.dir"
			name="app.server.classes.portal.dir" override="true"
		/>

		<get-database-property property.name="database.version" />

		<replace
			file="${app.server.dir}/webapps/ROOT/WEB-INF/web.xml"
			token="&lt;session-timeout&gt;30&lt;/session-timeout&gt;"
			value="&lt;session-timeout&gt;${test.session.timeout[tck]}&lt;/session-timeout&gt;"
		/>
		<antcall target="prepare-portal-ext-properties">
			<param name="app.server.classes.portal.dir" value="${app.server.classes.portal.dir}" />
		</antcall>

		<echo append="true" file="${app.server.classes.portal.dir}/portal-ext.properties"><![CDATA[
			browser.launcher.url=
			javascript.single.page.application.enabled=false
			layout.parallel.render.enable=false
			module.framework.auto.deploy.interval=2000
			session.timeout=${test.session.timeout[tck]}
			setup.wizard.enabled=false
			terms.of.use.required=false
			theme.portlet.decorate.default=false
			users.reminder.queries.enabled=false
			users.reminder.queries.custom.question.enabled=false
			web.server.https.port=8443]]></echo>

		<exec dir="${tck.home}/.." executable="git" failonerror="true">
			<arg value="stash" />
		</exec>

		<!--
		Due to a Liferay-specific performance optimization, the Portlet Hub dependency must be
		configured statically in order for top_head.jsp to output render data.
		-->
		<exec dir="${tck.home}/.." executable="git" failonerror="true">
			<arg value="apply" />
			<arg value="${project.dir}/tck/pluto-patch.diff" />
		</exec>

		<execute dir="${tck.home}/..">
			mvn -P all,liferay clean install
		</execute>

		<copy
			flatten="true"
			todir="${liferay.home}/deploy/"
		>
			<fileset
				dir="${tck.home}"
				includes="**/target/tck-V*.war"
			/>
		</copy>
		<gradle-execute dir="modules/test/portlet-tck-theme" task="deploy" />

		<propertycopy
			from="app.server.${app.server.type}.bin.dir"
			name="app.server.bin.dir" override="true"
		/>

		<antcall inheritall="false" target="start-app-server">
			<param name="app.server.bin.dir" value="${app.server.bin.dir}" />
		</antcall>

		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.api.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.service.jar" />
		<delete file="${liferay.home}/osgi/modules/com.liferay.chat.web.jar" />

		<echo
			file="${liferay.home}/osgi/modules/com.liferay.portlet.tck.bridge.configuration.PortletTCKBridgeConfiguration.cfg"
		>tckDeployFilesDir=${tck.home}/deploy/target/deploy-files</echo>

		<gradle-execute dir="modules/test/portlet-tck-bridge" task="deploy" />
		<wait-for-app-server-log-message log.message="Portlet TCK Bridge is ready" />

	</target>

	<target name="run-tck-tests">

		<tempfile
			createfile="true"
			deleteonexit="true"
			destDir="${project.dir}/tck"
			prefix="tck-tests_"
			property="tck.tests.xml"
			suffix=".xml"
		/>

		<copy
			file="${tck.home}/driver/target/classes/generated-resources/xml/final/test.xml"
			tofile="${tck.tests.xml}"
			overwrite="true"
		/>

		<xmltask preserveType="true" source="${project.dir}/tck/htmlunit-tests.xml">
			<call path="//*[local-name()='entry'][@key]">
				<param name="key" path="@key" />
				<actions>
					<replaceregexp
						file="${tck.tests.xml}"
						flags="im"
						match="&lt;entry[^&gt;]+key=&quot;@{key}&quot;[^&gt;]*&gt;[^&lt;]*&lt;/entry&gt;"
						replace=""
					/>
				</actions>
			</call>
		</xmltask>

		<var
			name="tck.properties"
			value="-Dtest.context.base='${test.context.base[tck]}' -Dtest.server.username.id='${test.server.username.id[tck]}' -Dtest.server.username='${test.server.username[tck]}' -Dtest.server.password.id='${test.server.password.id[tck]}' -Dtest.server.password='${test.server.password[tck]}' -Dtest.timeout='${test.timeout[tck]}' -Dtest.ignore.list.file=${project.dir}/tck/ignoredTestCases.xml -Dtest.non.exclusive.file=${project.dir}/tck/nonExclusiveTestCases.xml"
		/>

		<execute dir="${tck.home}" failonerror="false">
			mvn -Pliferay,run-tck -Djava.awt.headless=true ${tck.properties} -Dtest.browser=htmlunit -Dtest.browser.binary= -Dtest.browser.webDriver= -Dtest.list.file=${project.dir}/tck/htmlunit-tests.xml test
		</execute>

		<if>
			<available
				file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver.xml"
			/>
			<then>
				<mkdir dir="${project.dir}/tck/test-results" />

				<copy
					file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver.xml"
					tofile="${project.dir}/tck/test-results/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver-htmlunit.xml"
				/>
			</then>
			<else>
				<fail message="No TCK tests were run with HTMLUnit." />
			</else>
		</if>

		<prepare-chrome-driver />

		<propertycopy
			from="browser.${browser.type[tck]}.version"
			name="browser.version" silent="true"
		/>

		<propertycopy
			from="browser.${browser.type[tck]}.bin.file[${browser.version}]"
			name="browser.bin.file" silent="true"
		/>

		<propertycopy
			from="selenium.${browser.type[tck]}.driver.executable"
			name="selenium.tck.browser.driver.executable" silent="true"
		/>

		<execute dir="${tck.home}" failonerror="false">
			mvn -Pliferay,run-tck -Djava.awt.headless=true ${tck.properties} -Dtest.browser=${browser.type[tck]} -Dtest.browser.binary='${browser.bin.file}' -Dtest.browser.webDriver=${project.dir}/tck/${selenium.executable.dir.name}${selenium.tck.browser.driver.executable} -Dtest.list.file=${tck.tests.xml} test
		</execute>

		<if>
			<available
				file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver.xml"
			/>
			<then>
				<mkdir dir="${project.dir}/tck/test-results" />

				<copy
					file="${tck.home}/driver/target/surefire-reports/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver.xml"
					tofile="${project.dir}/tck/test-results/TEST-javax.portlet.tck.driver.TCKLiferayTestDriver-${browser.type[tck]}.xml"
				/>
			</then>
			<else>
				<fail message="No TCK tests were run with ${browser.type[tck]}." />
			</else>
		</if>

	</target>

	<target name="cleanup-tck">

		<exec dir="${tck.home}/.." executable="git" failonerror="false">
			<arg value="apply" />
			<arg value="--reverse" />
			<arg value="${project.dir}/tck/pluto-patch.diff" />
		</exec>

	</target>
</project>
